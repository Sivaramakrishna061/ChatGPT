1. Can you explain the difference between InnoDB and MyISAM storage engines in MySQL? When would you choose one over the other?
A. (i).InnoDB:- 
      1. InnoDB stands for Innovation DB which is a storage engine for the MySQL open source database system in 2001 by Oracle Corporation;
      2. InnoDB is a ACID compliance which support for transcations are essential for your application;
      3. It supports foreign key constraints which is essential for maintaining relationships between tables in a relational database;
      4. It uses row-level rocking which allows multiple users to read & write to different rows in a table simultaneously without blocking each other;
      5. It has a crash recovery mechanism which helps  to recover data in case of a server crash;
      6. It can support for transcational operations (e.g., banking, e-commerce);

   (ii). MyISAM:- 
      1. It stands for My Indexed Sequential Access Method which is storage engine for mySQL in 2009 by IBM;
      2. MyISAM is not ACID-compliant which does not support transactions & does not gurantee data consistency & integrity;
      3. MyISAM does not support foreign key constriants which rely on relationships between tables;
     4. It supports table-level locking, it means if one user is writting to a table, all other users are blocked to write on the same table;
     5. It can allow users to quickly retrieve information from large data sets;
     6. It doesnot support crash recovery mechanism which helps  to recover data in case of a server crash;

2. Can you explain the purpose of an index in a database? What are the different types of indexes supported by MySQL?
A. 1. Indexes can be used to order data efficiently in ascending or descending order;
     2. Indexes can used to access the specific rows more efficiently;
     3. When you run SELECT statements, indexes is used in conditions to idenitify relevant rows;
    4. It can avoid duplicate records & provide unique to columns;
    5. It supports primary keys & foreign keys which ensuring data integrity & referential integrity in the database;


3. What is the purpose of the EXPLAIN statement in MySQL?
A. The 'EXPLAIN' statement is used to analyze & obtain information about how MYSQL executes a query;
     Ex:-Create a table naming 'Customers' with the following schema
        CREATE TABLE customers (
             id INT PRIMARY KEY,
            first_name VARCHAR(50),
            last_name VARCHAR(50),
            email VARCHAR(100),
           created_at DATETIME
         );
Query is to retrieve all the customers whose last name is 'smith' & orders the results by the creation date;
       EXPLAIN SELECT * FROM customers WHERE last_name = 'Smith' ORDER BY created_at;

     The output may look like this:
         +----+-------------+-----------+------------+-------+---------------+---------+---------+------+-------+----------+-----------------------------+
           | id | select_type | table     | partitions | type  | possible_keys | key     | key_len | ref  | rows  | filtered | Extra                       |
         +----+-------------+-----------+------------+-------+---------------+---------+---------+------+-------+----------+-----------------------------+
           | 1  | SIMPLE      | customers | NULL       | ref   | last_name     | last_name | 53      | const| 10    | 100.00   | Using where; Using filesort |
          +----+-------------+-----------+------------+-------+---------------+---------+---------+------+-------+----------+-----------------------------+

4. Can you explain the ACID properties in the context of database transactions? How does MySQL ensure data consistency and reliability?
A. In MySQL, the InnoDB storage engine, which is the defult engine as of MySQL 5.5 designed with ACID properties;
     The ACID properties are a set of characterstics that ensure reliablity , integrity & consistency of database transcations (e.g., Bank, e-commerce);

5. What is a stored procedure in MySQL? How can they be advantageous in database development?
A. 1. A stored procedures is a prepared code that you can save, so the code can be reused over & over again; It can be invoked by name to perform a specific task or a series of 
          tasks; You can also pass parameters to a stored procedures, they can act based on the parameters values that you passed;
              Create Stored Procedures:- 
                  CREATE PROCEDURE procedure_name
                   AS
                 sql_statement
                  GO;
            Execute a Stored Procedure:-
                 EXEC procedure_name;
       2. Stored procedures encapsulate SQL statements & can used for reusability, security & performance optimization;

6. How do you back up and restore a MySQL database? Can you explain the different backup methods and their pros and cons?
A. Back up & restore a MySQL database is required to data protection & disaster recovery;
        1. Using 'mysqldb' command is used to backup & restore the database; It can back up databases, tables, or specific rows using options like '--databases', '--tables' or '--  
             where';
           # Backup a single database
                mysqldump -u username -p dbname > backup.sql

            # Restore a database
                 mysql -u username -p dbname < backup.sql

       2. Using binary log files or third-party backup tools or replication or cloud-based database services can be used to backup & restore the database;

7. What is the purpose of foreign keys in a MySQL database, and how do they maintain data integrity and relationships between tables?
A. A foreign key (FK) is a database constraint that establishes a relationship between two tables in a relational database;
      Example of Using a Foreign Key:-
       -- Create the Customers table
            CREATE TABLE Customers (
             CustomerID INT PRIMARY KEY,
             FirstName VARCHAR(50),
             LastName VARCHAR(50)
          );

     -- Create the Orders table with a foreign key
      CREATE TABLE Orders (
          OrderID INT PRIMARY KEY,
          CustomerID INT,
          OrderDate DATE,
          FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
     );
     The 'Customer' table contains customer information & 'CustomerID' column contains primary key or a unique key;
      The 'orders' table contains order information & includes  a foreign key constraint on the 'CustomerID' column of the child table;  The data in the child table references data in 
      the parent table;


8. Describe the differences between a primary key and a unique key constraint in MySQL. When and why would you use each of them?
A. In MySQL, both primary keys & unique key constraints  serve the uniqueness of values within a column or set of columns
      1. Primary Key Constraint:- 
           A primary key constraint enforces both uniqueness & non-null constraints; This means that a primary key column contain duplicate values & it must have a value for every 
           row in the table; A table can have only one primary key, which is a limitation;
     2. Unique Key Constraint:-
           A unique key constraint enforces uniqueness but it allows for null values in the columns; Unlike primary keys, a table can have multiple unique key constraints;


9. Can you explain the concept of data types in MySQL? Give examples of different data types and explain their appropriate use cases?
A. Data types are used to define the type of data that can be stored in particular column of a table; It can used for data integrity, storage efficiency & query performance;
      1. INT (Integer):- This data type used for store whole numbers; Ex:- IDs, counts;
           CREATE TABLE employees (
              employee_id INT,
              age INT
           );
    2. VARCHAR(n):- This data type used for store variable-length strings; Ex:- Names, Addresses, email addresses & other textual data;
          CREATE TABLE customers (
            customer_id INT,
            first_name VARCHAR(50),
            last_name VARCHAR(50)
         );

   3. TEXT:- This data type used for large text data; Ex:- descriptions, comments or articles;
         CREATE TABLE articles (
           article_id INT,
           content TEXT
          );

    4. DATE & TIME:- This data type used for store dates & times;Ex:- Birthdates, order dates, appointments times;
          CREATE TABLE events (
             event_id INT,
             event_name VARCHAR(100),
            event_date DATE,
           event_time TIME
         );


   5. BOOLEAN (TINYINT(1)):This data type used for store true/false (0 for false, 1 for true);
         CREATE TABLE tasks (
            task_id INT,
            is_completed TINYINT(1)
            );

    6. ENUM:- 
         This data type used for a set of predefined values;
             CREATE TABLE products (
                product_id INT,
               product_status ENUM('active', 'inactive')
           );

     7. BLOB(Binary Large Object):-
           This data type used for storing binary data like images, audio, or other large files;
             CREATE TABLE images (
                image_id INT,
                image_data BLOB
           );

https://www.w3schools.com/sql/sql_join.asp
10. What is the purpose of the `JOIN` clause in SQL? Can you explain the different types of joins?
A.   1.  'JOIN' Clause:- 
          A JOIN clause is used to combine rows from two or more tables based on condition matches;
            Ex:- SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
                   FROM Orders
                  INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;

 2. 'LEFT JOIN'
      A left join returns all the rows from the left table & the right table whether row condition matches;
      If there is no condition match for a row in the left table, null values are returned for the columns from the right table;
      Ex:-SELECT Customers.CustomerName, Orders.OrderID
              FROM Customers
             LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID

 3. 'RIGHT JOIN':-
       A Right join returns all the rows from the right table & the left table whether row condition matches;
       If there is no condition match for a row in the right table, null values are returned for the columns from the left table;
        Ex:- SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
                FROM Orders
                RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID


11. How do you secure a MySQL database? What are the best practices for user authentication, authorization, and data encryption?
A. Here are a few steps for secure a MySQL database:-
        1. Authentication:-
              1. Enforce the use of strong, complex passwords  instead of common words or easily guessable passwords for database accounts;
              2. Change default password, especially for the root user & Implement Two-factor authentication for MySQL users;
        2. Authorization:-
            Assign the minimum necessary privileges & permissions to each user; Use the 'GRANT' statement restrict which hosts or IP addresses can connect to the MySQL server;
        3. Enable SSL/TLS & transparent data encryption (TDE) to encrypt data in transit between the client & server;
        4. Implement a regular backup strategy
        5. Regularly apply security patches & updates to your MySQL server against known vulnerabilities;
        6. Implement the firewalls to restrict access from untrusted hosts & networks;
        7. Conduct penetration testing to identify vulnerabilities & weakness in MySQL database;

12. What is the difference between a view and a table in MySQL? When and why would you use views to simplify data access?
A. Tables store data physically on disk; Tables are used for data manipulation & storage; Let's create a simple table called 'employees' with following columns employee_id, 
       first_name, last_name, email, and salary.
          CREATE TABLE employees (
            employee_id INT AUTO_INCREMENT PRIMARY KEY,
            first_name VARCHAR(50),
            last_name VARCHAR(50),
            email VARCHAR(100) UNIQUE,
            salary DECIMAL(10, 2)
       );

     The 'employee_id' column is set as the primary key, & 'email' column has a unique constraint, ensuring that both are unique in the table;


    VIEW:-
         A view is a virtual table which is used to simply the complex queries & restrict access the data & hiding the data structure; In this example, we have created a view named  
         'high_salary_employees' from the 'employees' table;
             CREATE VIEW high_salary_employees AS
                  SELECT first_name, last_name, salary
                  FROM employees
              WHERE salary > 50000;

       Here's an example of querying the high_salary_employees view:
            SELECT * FROM high_salary_employees;

************************************************************************************************************************************************************************
13. Explain the difference between CHAR and VARCHAR data types in MySQL. When would you use each?
A. (i). CHAR:- It  always reserve a fixed amount of storage, regardless of the length of the data stored in the column; It can waste storage space;
     (ii). VARCHAR:- It is a variable-length character data type; It can only use storage space for actual data stored in the column;
              CREATE TABLE Example1 (
                 char_column CHAR(10),
                 varchar_column VARCHAR(10)
             );

           INSERT INTO Example1 (char_column, varchar_column) VALUES ('hello', 'hello');

           SELECT CHAR_LENGTH(char_column), CHAR_LENGTH(varchar_column) FROM Example1;

          In this example, the CHAR column 'char_column' will always use 10 charachers of storage, while the VARCHAR column 'varchar_column' will use only 5 characters of 
          storage;


14. Explain the difference between UNION and UNION ALL in MySQL. When would you use one over the other?
A. (i). UNION:-
           The UNION is a operator which combines the result sets of multiple SELECT statements & returns a single result set with distinct values; It eliminates duplicate rows 
            from the combined result set;
                     SELECT column1 FROM table1
                       UNION
                     SELECT column1 FROM table2;

    (ii). UNION ALL:-
             The UNION  ALL is a operator which combines the result sets of multiple SELECT statements & returns a single result set with duplicates values; It does not eliminates 
             duplicate rows from the combined result set;

             SELECT column1 FROM table1
               UNION ALL
            SELECT column1 FROM table2;


15. How do you handle transactions in MySQL? Can you provide an example of a transaction in MySQL?
A. In MySQL, a transcation is sequence of one or more SQL statements that treated as a single, indivisible operation; It follows the ACID properties: Atomicity, Consistency,     
       Isolation & durability;
     Here's a basic example of how transcations work in MYSQL:

-- Start a transaction
        START TRANSACTION;
-- SQL statements within the transaction
         INSERT INTO customers (id, name, email) VALUES (1, 'John Doe', 'john@example.com');
         UPDATE account SET balance = balance - 100 WHERE customer_id = 1;
         DELETE FROM cart WHERE customer_id = 1;

-- If everything is successful, commit the transaction
         COMMIT;
-- If there's an error or condition that requires rolling back the changes
        ROLLBACK;

Transcations are typically used where a series of operations pereformed together, if any changes in transcations, then it rolled back to the maintain data consistency;

16. Explain the concept of subqueries in MySQL. Can you provide an example of a query that uses a subquery?
A. In MYSQL, a subquery (also known as nested query or inner query) is a query that is embedded within another query, as known as the outer query; Subqueries are used to      
     retrieve data that will be used in the main query's criteria; Subquery can be used various parts of SQL statement, such as the SELECT, FROM, WHERE & HAVING clauses;
      SELECT employee_name
      FROM employees
      WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Sales');

17. What is the purpose of the `LIMIT` clause in MySQL? Can you provide an example of how it can be used in a query?
A. The 'LIMIT' clause is used to restrict the number of rows returned by 'SELECT' statment; It can limit the number of results returned in a query;
          SELECT column1, column2, ...
          FROM table_name
          LIMIT number_of_rows;

19.  Describe the process of creating and managing user accounts and access privileges in MySQL?
A. You can create & manage user accounts & access privileges in MySQL using CLI (MySQL Shell) or Graphical tool (phpMyAdmin); It can ensure that only authorized users 
        can access & privileges to the database;
          1. Login as the MySQL root user with privileges;
                mysql -u root -p
          2. To create a new user account, use the CREATE USER statement & specify username & password;
                 CREATE USER 'username'@'host' IDENTIFIED BY 'password';

           3. To grant privileges to user account, use the 'GRANT' statement & specify the privilege user & Privileges are SELECT, INSERT, UPDATE, DELETE, CREATE, etc.,
           4. After grant privileges, you need to reload to take effect on the table;
                 FLUSH PRIVILEGES;
           5. You can view the user's current privileges using 'SHOW GRANTS' statements;
                SHOW GRANTS FOR 'username'@'host';
          6. You can use the 'ALTER USER' statement if you want to can change the user's password;
                 ALTER USER 'username'@'host' IDENTIFIED BY 'new_password';
          7. If you need to remove certain privileges from a user, use 'REVOKE' statement;
                 REVOKE privileges ON database_name.table_name FROM 'username'@'host';
          8. To delete a user account, use the 'DROP USER' statement;
                  DROP USER 'username'@'host';
          9. Use the 'EXIT' statement to exit from MySQL database;
                 EXIT;

19. Databases:-
A. Databases are organized collections of data that are designed to store,manage & retrieve information effectively; Here are some of the database types:
       1. Relational Database:-
            Relational databases are structured using tables with rows & columns; It is easy to query using SQL (Structured Query Language);
             Ex:- MySQL, PostgreSQL, Oracle, Microsoft SQL Server;
       2. NoSQL Databases:- (Not Only SQL)
             It is designed as unstructured or semi structured for data; It don't use tabular structure;
              Ex:MonogoDB, Cassandra, Redis, Coughbase;
       3. Key-Value Stores:- 
              These database store the data as a collection of key-value pairs;
                Ex:- Redis, Riak, DynamoDB;
      4. Document Databases:-
             Data store in semi-structured format, often in JSON or XML format; Ex:- MongoDB, CoughDB, RavenDB;
      5. Columns-family Stores:-
             Data store in columns only, not rows; Ex:- Apache Cassandra, HBase;
      6. Graph Database:- 
              Data represents & query data as nodes & edges;
                  Ex:- Neo4j, Amazon Neptune, OrientDB;
      7. In-Memory Databases:-
            Data can store in system memory (RAM) rather than on disk;
                Ex:- Redis, Memcached;
     8. BlockChain Databases:- Bitcoin, Ethereum;

20. Can you describe a situation where you had to troubleshoot and resolve a critical MySQL database issue? What was the problem, and how did you resolve it?
A. Problem:- 
          The MySQL database server is unresponsive & application could not make establish the connection with a database;
       Resolution:-
       1. Check the server status like CPU, Memory, disk space;
       2. Review error logs provide valuable information about what might have gone wrong;
       3. Verify that there is enough disk space on the server to accommodate MySQL data files, transcation logs & temporary files;
       4. 'SHOW PROCESSLIST' statement is used to examine resource usage;
       5. If there are no obvious issues, you can restart the MySQL service;
             sudo service mysql restart
      6. If the issue is recurring & high traffic, you will add more resources, load balancing to distribute the load;

21. What are some best practices for maintaining and monitoring MySQL databases in a production environment?
A. Here are some best practices to help you achieve this:
          1. Schedule the regular backups to prevent data loss;
          2. Monitor database metrics such as CPU usage, memory consumption, query performance & disk I/O;
          3. Implement access control & grant the privileges to users;
         4. Set up database replication for redundancy & failover;
         5. Implement query catching to reduce the load on your database server;
         6. Regularly review error logs & address issues as they arise;
         7. Ensure data consistency & integrity by defing foreign key constraints & trancations;
         8. Maintain up to date documentation for database schema, configurations & procedures;
         9. Test new configurations & changes in stagging environment before move to production database;
        10. Develop a disaster recovery plan to handle data loss, server failures or other critical incidents;


22. Can you explain the differences between SQL, NoSQL, and NewSQL databases, and when you would choose one over the other for a particular project?
A. SQL, NoSQL & NewSQL are three different categories of database management Systems;
             1. SQL (Structured Query Language) Database:- MySQL, PostgreSQL & Oracle;
             2. NoSQL (Not Only SQL) Databases:-
                  1. Document-Oriented:- MonogoDB,
                  2. Key-Value Stores:- Redis,
                  3. Column-Family Stores:- Apache Cassandra
                 4. Grapgh Databases:- Neo4j
            3. NewSQL Databases:- Ex:- Google Spanner, NuoDB, CockroachDB;


************************************************************************************************************************************************************************














