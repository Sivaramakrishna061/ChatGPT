1.What is Postman, and how does it help in API testing and development?
A. 1. Postman is a software tool which is used by devlopers & testers for API testing & development;
   2. Postman allows you to send requests to API Endpoints using various HTTP methods (GET, POST, PUT, DELETE,etc), specify request headers, parameters, authentication 
         credentials & request bodies;
   3. Postman displays the full details of the HTTP request & response; This helps to identify any issues & understanding the API's behavior;
   4. Postman organize API requests into collections which can be categorized into folders;
   5. Postman allows you to manage variables (e.g., base URLs, authentication tokens) for different environments (e.g., development, stagging, production);
   6. Postman enables you to create test scripts using JavaScript, You can validate response data, status codes, header and more by using test scripts;
   7. Postman can generate detailed documentation about the APIs
   8. Postman can share collections, environments & documentations to the team members;
   9. Postman can allow you to integrated into Continuous Integration (CI) & Continuous deployment (CD) pipelines;

2. Explain the difference between a request and a collection in Postman?
A. 1. Requests:-  A request referes to a single HTTP request that you can send to an API endpoint; It can encapsulates all the information including HTTP method (GET, POST, 
         PUT, DELETE, etc), URL or Endpoint, Headers (Content-Type, Authorization), Request parameters (query parameters or URL parameters), Request Body (for methods  
          like POST or PUT);  When you create a request in postman, you can specify these details and can send the request to API server; You can view the response which includes 
          the HTTP status code, response headers & response body;
    2. Collections:- A collections in postman is a logical group of multiple requests; It can allows you to organize multiple related requests into a single unit for better management 
          & documentations; Under a collections, You can create folders to further categorize your requests based on requirements; A collection runner can execute a sequest of 
         requests from the colleciton and view the results;

3. Walk me through the process of creating a new API request in Postman?
A. Postman is a popular tool for testing & interacting with APIs; Here step-by-step guide to create a new API
      1. Install Postman,
      2. Open the Postman application on your computer,
      3. Click on the 'New' button where it was at the top-left corner of the Postman window, then select 'Request' and Give Meaningful name to the 'Request';
      4. In Request panel, Select the appropriate HTTP method (GET, POST, PUT, DELETE,etc) what you want to perform on the API; Enter the Endpoint URL includes the 
           protocol (http/https), domain, any path or query parameters; If your API requires headers, you can add it in 'Headers'tab that support the 'key-value' pairs; 
           If your API requires request body (Usually for POST, PUT or PATCH), You can define the request payload in the 'Body' tab;
     5. Click on the 'Send' button located on the right side of the request panel;
     6. You can view the response like status code, headers & response body;
     7. Save the Request if you want to use futher;

4. What are the various request types/methods you can use in Postman? Provide examples of when each would be used?
A. 1. GET method:- It is used to retrieve the data from the server; It should not any side effects on the server;
      2. POST:- It is used to create a new resource on the server;'
      3. PUT:- It is used to update or replace existing data on the server;
      4. PATCH:- It is used to update specific fields without affecting entire resource on the server;
      5. DELETE:- It is used to remove entire resource from the server;

5. How do you set headers, query parameters, and request body in a Postman request?
A. 1. Headers allow you to provide additional information about the request such as authentication tokens, content types etc; You can set headers in the 'Headers section' tab 
            which contains key-value pairs;
      2. Query parameters are used to filtering or pagination of the request, it often used in URL;  You can set the query parameters in the 'Params' section tab which contains key-
            value pairs;
      3. Request Body:-
           The request body is used to send data like JSON, XML, or form data to the server; You can set body in 'Body' Section & after choosen body format (e.g.. 'raw' for JSON)

6. How do you perform automated testing of APIs using Postman?
A. Postman is a powerful testing framework that can allows you to write & execute tests for your APIs;
      1. Install Postman,
      2. Create a Collection and add API Requests to it,
      3.  Create a Request including URL, HTTP methods (GET, POST, PUT, DELETE, etc), Headers, Request Body, Parameters;
      4. To automate the API Request, click on the 'Tests' tab in the request window and use the JavaScript code to define your tests,
      5. You can use Chai Assertions for writting assertions;
            // Test status code
                pm.test("Status code is 200 OK", function () {
                    pm.response.to.have.status(200);
                });

        // Test response time
               pm.test("Response time is less than 500ms", function () {
                  pm.expect(pm.response.responseTime).to.be.below(500);
             });

       // Test JSON response property
            pm.test("Response body contains expected property", function () {
               const responseBody = pm.response.json();
               pm.expect(responseBody).to.have.property("property_name");
         });

        6. Next, Click on the 'Send' button and review the results in the 'Test Results' tab;
        7. If you want to run multiple requests & tests in the collection, you can use loop or Collection Runner feature;
        8. You can export your collection  to other team members or You can integrate with (CI/CD) pipeline;

7. What are assertions in Postman, and how do you set them up for response validation?
A. Assertions are statements that can verify & validate whether the API responses meet your requirements; Postman use the Chai Asserions that can use to check various aspects 
      of the API response;
       1. Status Code Assertions:-
              pm.test("Status code is 200 OK", function () {
                   pm.response.to.have.status(200);
               });
       2. Response Time Assertion:-
              pm.test("Response time is less than 500ms", function () {
                pm.expect(pm.response.responseTime).to.be.below(500);
            });
      3. Response Body Assertion:-
             pm.test("Response body contains expected property", function () {
               const responseBody = pm.response.json();
               pm.expect(responseBody).to.have.property("property_name");
           });
     4. Header Assertion:-
            pm.test("Content-Type header is JSON", function () {
              pm.expect(pm.response.headers.get("Content-Type")).to.include("application/json");
         });


8. How would you handle different types of responses, such as JSON, XML, or plain text, in your test scripts?
A. In Postman, You can handle different types of responses (JSON, XML, planin Text etc.,) using built-in functionality;
      To handle JSON responses, You can use built-in JSON parsing capabilities;
         // Assuming 'response' contains the JSON response
             var jsonData = pm.response.json();
      // Access specific fields and perform assertions
             pm.expect(jsonData.key).to.eql(expectedValue);
     To handle XML reponses, you can use the 'xml2js' library to conveert XML to JSON and then work with the JSON structure;

10. How do you create and manage collections of API requests in Postman?
A.  Postman can organze & manage Collections API;
       Here some steps to follow:-
         1. Open the Postman, Click on the 'Collections' tab where it is in the left sidebar and under the 'Collections' tab, click the 'Add folder' to organize your requests and configure  
             the request including (API Endpoint URL, Req. Type (GET, POST, PUT, DELETE,etc), Request Parameters, Request Headers, Authentications tokens); Click on the       
            'Save' button to add the request to the collection;

11. Describe a situation where you needed to share a collection with a team member. How did you manage this in Postman?
A. When a software developer working on an API project, they need to share a postman collection with a team member who is responsible for testing the API endpoints;
       Right click on the Postman collections, select 'Export' and choosen the JSON format; Your team member will need to import the JSON file into the Postman to testing;

12. Have you used Postman's scripting capabilities (Pre-request Script, Tests) for automation? Could you provide an Weather API example?
A. (i). 'Pre-request Script'  is a script that can executed before the actual API request is sent; It can store postman varibales and can be used in API request;
              // Pre-request Script
                       pm.variables.set("city", "New York");
       (ii). 'Tests' section allows you to write scripts to validate the response from the API;
                  // Tests
                       1. pm.test("Status code is 200", function () {
                                 pm.response.to.have.status(200);
                             });

                      2. pm.test("Response contains temperature", function () {
                                const responseBody = pm.response.json();
                                pm.expect(responseBody).to.have.property("temperature");
                         });

                   3. pm.test("Temperature is a number", function () {
                            const responseBody = pm.response.json();
                            pm.expect(responseBody.temperature).to.be.a("number");
                     });

                4. pm.test("Temperature is not too high", function () {
                        const responseBody = pm.response.json();
                        pm.expect(responseBody.temperature).to.be.below(40); // Assuming Celsius
                        });


13. How would you handle scenarios where the response from one request needs to be used as input in another request?
A.   In Postman, the response from one request needs to be used as input in another request; Postman can  achieve this using environmental variables or global variables;
        1. First request (GET /get-city):
             In the 'Tests' section, you can extract the 'city' name from the response and set it as an environment variable;
             // Tests for GET /get-city
                   const responseBody = pm.response.json();
                   pm.environment.set("currentCity", responseBody.city);
       2. Second Request (GET /get-weather)
           In the second request, you can use 'currentCity' environmental variable to pass in the API as a input;
             GET /get-weather?city={{currentCity}}
      3.  Verifying the Second Request:-
              In the 'Tests' section of the second request, you can perform validation on the second request of Weather data as needed;
             // Tests for GET /get-weather
                const responseBody = pm.response.json();
                pm.test("Temperature is a number", function () {
                   pm.expect(responseBody.temperature).to.be.a("number");
             });


14. Explain the concept of chaining requests and how it helps in testing complex workflows?
A. Chaining Request is a powerful technique in API testing that enables the output of one request serves as the input for another rquest; Chaining requests also known as 
       request chaining or request orchestration;

15. What is Newman, and how does it extend the functionality of Postman?
A. Newman is a command-line tool that can designed to run Postman collections automatically;
       It can generate detailed HTML & JSON reports after running Postman Collections; It can support parallel execution of collections which can speed up the testing process &   
       reduce the overall testing time; It can run the collections using this command i.e., newman run [options] [collectionFile]

16. What are some best practices/Strategies you follow when creating and managing API requests and collections in Postman?
A. 1. Organize related requests into collections and use folders within collections to futher categorize those requests;
       2. Use clear & meaningful names or labels to the request;
       3. Configure the API Endpoints, headers, query parameters, request bodies & environmental variables for each request;      
       4. Utilize environment variables to manage dynamic values such as URLs, tokens;
       5. Use data files with different inputs for data-driven testing;  
       6. Use assertions to validate the correctness of responses;
       7. Regularly review & update dependencies including libraries & scripts used in tests;
       8. Periodically review export your collections for backup purpose;
       9. Store the collections in version control repositories like Git to track changes over time;
       10. Integrate Postman with CI tools for automatic testing & monitoring;

18.  Explain the difference between global variables and environment variables in Postman. When would you use each of them?
A. (i). Global variables are variables that can defined at top level and can accessible throught the entire Postman applicaion, including different collections & requests;
             It can store constant values like API endpoints, headers or authentication tokesn that are used across multiple collections;
      (ii). Environment Variables:-
               Environment varibables are variables that can used to specific environments; There are multiple environments (e.g., development, stagging, production) to test your 
               API, there environment variables are used;

**************************************************************************************************************************************************************************
1. What is data-driven testing, and how can it be implemented in Postman? Why is it valuable in API testing?
A. Data-driven testing is a software testing where test cases are designed based on a multiple sets of input data and the expected outcomes for those inputs; Collection Runner 
      feature along with CSV or JSON data files are used for data driven testing or paramterization;
        1. Create API request with appropriate End Points, Parameters, headers and any necessary pre-requrst scripts;
        2. Prepare a CSV or JSON file with sets of data:
                  username,password,expectedResponse
                    user1,pass123,200
                    user2,pass456,401
      3. You would create environment variables named 'username', 'password', & 'expectedResponse'; These are get the values from data source files for each iteration;
      4. Modify the request with environmental vatriables;
      5. Open the collection runner, import CSV file and select iterations and click on the 'Start Run' button to execute the collections;

2. How do you handle testing APIs that involve file uploads or downloads using Postman?
A. (i). File Uploads:- 
           Create a Request including with POST Method, Content-Type Headers & authentication headers and set the the 'form-data' in body section to upload file; finally click on  
           'Send' button to get response;
    (ii). File Download:- Create a Request includes with GET Method, add any necessary headers if required, Click on the 'Send' button to send the request; In the response panel, 
             response will be the file data then choose the desired location to save the file;

**************************************************************************************************************************************************************************
1.  Describe the process of creating and sending a GET request using Postman?
A. GET Request:-
         1. Launch the Postman application,
         2. Click on the 'New' button where it is in top-left corner of the window,
         3. Select the 'Request' option and Give the descriptive name,
         4. In the URL bar, enter the complete URL & Choose the ' GET' from the HTTP dropdown menu & add the headers in the Headers tab if it is required;
         5. Click on the 'Send' button to sendthe GET request;
         6. You can view response details like status code, headers & response body under the response section,
         7. You can use 'Pretty' button to show the JSON response for easier reading,
         8. You can also set up assertions to validate specific aspects of the response such as status codes or data,
         9. You can save the request in a postman collection for later use;

2. What are environments in Postman, and how do you use them to manage different testing environments (e.g., development, testing, production)?
A. 1. In Postman, you can create multiple environments such as development, testing, staging & production for multiple purpose;
       2. You can define the variables specific to that environment; Variables like base URLs, authentication tokens, API keys & any other data;
       3. When you sent specific API request, select the environment and enclosing variables name in double curly braces;
            Ex:- {{base_url}}/endpoint
      4. Environments can simplifying the process of testing APIs across different environments;

 3. how do you handle authentication and authorization mechanisms (e.g., API keys, OAuth tokens) in Postman?
A. Postman support various authentication mechanisms like
          1. Basic Authentication:- You can enter the username & password directly;
          2. Bearer Token Authentication:- To use a bearer token, you can include the token in the 'Authorization' header as 'Bearer <token>'
          3. OAuth Flows:- You can use Postman OAuth 2.0 authorization feature guide you through the process of obtaining tokens;
                   https://learning.postman.com/docs/sending-requests/authorization/oauth-20/ 

4. Can you demonstrate how you would test a POST request that includes JSON data using Postman?
A. 1. Open the Postman
    2. Click on the 'Request' tab
    3. Select the 'POST' http method, enter the URL of the endpoint;
    4. Select 'Body' tab, choose the 'raw' option & select 'JSON'
    5. Click on the 'Send' button to send the POST request;
    6. You will see the status code, headers & body of the response unser the response section;

5. Describe a scenario where you encountered an API-related bug. How did you identify and resolve the issue using Postman?
A. You found that incorrect reponse format bug; I found that the 'Content-Type' header might be set incorrectly or not valid JSON; Use the postman ensure that the 'Content-
     Type' header is not set to the 'application/json'

**************************************************************************************************************************************************************************
1. What are some common types of tests you can perform using Postman? Can you provide examples of scenarios where you would use each type of test?
A. Postman is a versatile tool which can perform for conducting various types of tests on APIs;
      It can perform various Tests i.e.,
       1. Functional Tests:- Verify that basic functionality of an API endpoint;
       2. Authentication & Authorization Tests:- Verify that authentication & authorization mechanisms are working correctly or not;
       3. Data validation Tests:- Ensure that the data returned by the API meets the expected validation criteria;
       4. Load & performance Tests:- Verify how the API performs under different levels of load;
       5. Security Tests:- Identify vulnerabilities or security issues in the API;
       6. Regression Tests:- Ensure that recent changes or updates in the API do not break exist functionality;
       7. Automated tests:- To avoid repetitive tasks, You can use automation tests;
       8. Negative Tests:- Tests how the API handles with unexpected or invalid inputs;

2. Can you explain how Postman can be integrated with Continuous Integration (CI) and Continuous Deployment (CD) pipelines? Have you set up such integrations before?
A. CI/CD Pipelines ensure that your APIs are tested consistently & automatically whenever there are changes in the codebase;
         1. Choose any one CI/CD Tool such as Jenkins, Travis CI, CircleCI, GitLab CI/CD
         2. Configure Environment where necessary tools, dependencies for Postman;
         3. Import the Postman Collections in Postman;
        4. Within Your CI/CD pipeline configuration, Postman Collection Runner or Newman can executes the postman collections
        5. Configure your pipeline to automatically run postman;
        6. It can generate reports;

**************************************************************************************************************************************************************************
1. Can you share a challenging scenario you encountered while using Postman and how you resolved it?
A. Challenging Scenario in Postman is to handling OAuth 2.0 authentication; The API documentation specifies how to obtain an access token by sendingPOST request with 
     client credentials  (client_id, client_server, grant_type, etc) to authorization server; Once you have the access token, you need to include int in the headers of the subsequent 
     API requests;



**************************************************************************************************************************************************************************






















